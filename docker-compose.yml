version: '3.8' # Define a versão do docker-compose, que afeta quais recursos estão disponíveis.

services: # Inicia a definição dos serviços (containers) que compõem a aplicação.

  nginx: # Define um serviço chamado "nginx".
    image: nginx:latest # Usa a imagem mais recente do nginx disponível no Docker Hub.
    container_name: nginx_container # Define o nome do container como "nginx_container".
    ports:
      - "80:80" # Mapeia a porta 80 do host para a porta 80 do container, permitindo acesso ao nginx.
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf # Monta o arquivo de configuração do nginx do host para o container.
      - ./src:/var/www/html # Monta o diretório src do host no diretório /var/www/html do container, para servir arquivos estáticos.
    depends_on:
      - php # Especifica que o serviço nginx depende do serviço php, garantindo que o php seja iniciado primeiro.

  php: # Define um serviço chamado "php".
    build: # Instrui o Docker a construir a imagem a partir de um Dockerfile.
      context: ./php # Define o diretório que contém o Dockerfile como ./php.
    container_name: php_container # Define o nome do container como "php_container".
    volumes:
      - ./src:/var/www/html # Monta o diretório src do host no diretório /var/www/html do container, para servir arquivos PHP.

  mysql: # Define um serviço chamado "mysql".
    image: mysql:latest # Usa a imagem mais recente do MySQL disponível no Docker Hub.
    container_name: mysql_container # Define o nome do container como "mysql_container".
    environment: # Define variáveis de ambiente para o MySQL.
      MYSQL_ROOT_PASSWORD: root_password # Define a senha do usuário root do MySQL.
      MYSQL_DATABASE: ifsp # Cria uma base de dados chamada "ifsp" automaticamente.
      MYSQL_USER: user # Cria um usuário chamado "user".
      MYSQL_PASSWORD: 123456 # Define a senha para o usuário "user".
    ports:
      - "3350:3306" # Mapeia a porta 3350 do host para a porta 3306 do container, permitindo acesso ao MySQL.
    volumes:
    - ./db:/docker-entrypoint-initdb.d # Monta o diretório db do host no diretório /docker-entrypoint-initdb.d do container, para inicialização do banco de dados.